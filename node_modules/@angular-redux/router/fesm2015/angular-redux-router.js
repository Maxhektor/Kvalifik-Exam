import { NgRedux } from '@angular-redux/store';
import { Location } from '@angular/common';
import { Injectable, NgModule } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UPDATE_LOCATION = '@angular-redux/router::UPDATE_LOCATION';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DefaultRouterState = '';
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function routerReducer(state = DefaultRouterState, action) {
    switch (action.type) {
        case UPDATE_LOCATION:
            return action.payload || DefaultRouterState;
        default:
            return state;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgReduxRouter {
    /**
     * @param {?} router
     * @param {?} ngRedux
     * @param {?} location
     */
    constructor(router, ngRedux, location) {
        this.router = router;
        this.ngRedux = ngRedux;
        this.location = location;
        this.initialized = false;
        this.selectLocationFromState = state => state.router;
    }
    /**
     * Destroys the bindings between \@angular-redux/router and \@angular/router.
     * This method unsubscribes from both \@angular-redux/router and \@angular router, in case
     * your app needs to tear down the bindings without destroying Angular or Redux
     * at the same time.
     * @return {?}
     */
    destroy() {
        if (this.urlStateSubscription) {
            this.urlStateSubscription.unsubscribe();
        }
        if (this.reduxSubscription) {
            this.reduxSubscription.unsubscribe();
        }
        this.initialized = false;
    }
    /**
     * Initialize the bindings between \@angular-redux/router and \@angular/router
     *
     * This should only be called once for the lifetime of your app, for
     * example in the constructor of your root component.
     *
     *
     * @param {?=} selectLocationFromState Optional: If your
     * router state is in a custom location, supply this argument to tell the
     * bindings where to find the router location in the state.
     * @param {?=} urlState$ Optional: If you have a custom setup
     * when listening to router changes, or use a different router than \@angular/router
     * you can supply this argument as an Observable of the current url state.
     * @return {?}
     */
    initialize(selectLocationFromState = state => state.router, urlState$) {
        if (this.initialized) {
            throw new Error('@angular-redux/router already initialized! If you meant to re-initialize, call destroy first.');
        }
        this.selectLocationFromState = selectLocationFromState;
        this.urlState = urlState$ || this.getDefaultUrlStateObservable();
        this.listenToRouterChanges();
        this.listenToReduxChanges();
        this.initialized = true;
    }
    /**
     * @private
     * @return {?}
     */
    getDefaultUrlStateObservable() {
        return this.router.events.pipe(filter(event => event instanceof NavigationEnd), map(() => this.location.path()), distinctUntilChanged());
    }
    /**
     * @private
     * @param {?=} useInitial
     * @return {?}
     */
    getLocationFromStore(useInitial = false) {
        return (this.selectLocationFromState(this.ngRedux.getState()) ||
            (useInitial ? this.initialLocation : ''));
    }
    /**
     * @private
     * @return {?}
     */
    listenToRouterChanges() {
        /** @type {?} */
        const handleLocationChange = (location) => {
            if (this.currentLocation === location) {
                // Dont dispatch changes if we haven't changed location.
                return;
            }
            this.currentLocation = location;
            if (this.initialLocation === undefined) {
                this.initialLocation = location;
                // Fetch initial location from store and make sure
                // we dont dispath an event if the current url equals
                // the initial url.
                /** @type {?} */
                const locationFromStore = this.getLocationFromStore();
                if (locationFromStore === this.currentLocation) {
                    return;
                }
            }
            this.ngRedux.dispatch({
                type: UPDATE_LOCATION,
                payload: location,
            });
        };
        if (this.urlState) {
            this.urlStateSubscription = this.urlState.subscribe(handleLocationChange);
        }
    }
    /**
     * @private
     * @return {?}
     */
    listenToReduxChanges() {
        /** @type {?} */
        const handleLocationChange = (location) => {
            if (this.initialLocation === undefined) {
                // Wait for router to set initial location.
                return;
            }
            /** @type {?} */
            const locationInStore = this.getLocationFromStore(true);
            if (this.currentLocation === locationInStore) {
                // Dont change router location if its equal to the one in the store.
                return;
            }
            this.currentLocation = location;
            this.router.navigateByUrl(location);
        };
        this.reduxSubscription = this.ngRedux
            .select(state => this.selectLocationFromState(state))
            .pipe(distinctUntilChanged())
            .subscribe(handleLocationChange);
    }
}
NgReduxRouter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgReduxRouter.ctorParameters = () => [
    { type: Router },
    { type: NgRedux },
    { type: Location }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgReduxRouterModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgReduxRouterModule,
            providers: [NgReduxRouter],
        };
    }
}
NgReduxRouterModule.decorators = [
    { type: NgModule }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgReduxRouterModule, NgReduxRouter, routerReducer, UPDATE_LOCATION };

//# sourceMappingURL=angular-redux-router.js.map