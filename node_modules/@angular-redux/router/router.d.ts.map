{"version":3,"file":"router.d.ts","sources":["router.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgRedux } from '@angular-redux/store';\nimport { Location } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nexport declare class NgReduxRouter {\n    private router;\n    private ngRedux;\n    private location;\n    private initialized;\n    private currentLocation?;\n    private initialLocation?;\n    private urlState?;\n    private urlStateSubscription?;\n    private reduxSubscription?;\n    constructor(router: Router, ngRedux: NgRedux<any>, location: Location);\n    /**\n     * Destroys the bindings between @angular-redux/router and @angular/router.\n     * This method unsubscribes from both @angular-redux/router and @angular router, in case\n     * your app needs to tear down the bindings without destroying Angular or Redux\n     * at the same time.\n     */\n    destroy(): void;\n    /**\n     * Initialize the bindings between @angular-redux/router and @angular/router\n     *\n     * This should only be called once for the lifetime of your app, for\n     * example in the constructor of your root component.\n     *\n     *\n     * @param selectLocationFromState Optional: If your\n     * router state is in a custom location, supply this argument to tell the\n     * bindings where to find the router location in the state.\n     * @param urlState$ Optional: If you have a custom setup\n     * when listening to router changes, or use a different router than @angular/router\n     * you can supply this argument as an Observable of the current url state.\n     */\n    initialize(selectLocationFromState?: (state: any) => string, urlState$?: Observable<string> | undefined): void;\n    private selectLocationFromState;\n    private getDefaultUrlStateObservable;\n    private getLocationFromStore;\n    private listenToRouterChanges;\n    private listenToReduxChanges;\n}\n"]}